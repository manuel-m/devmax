

services:
  dev-environment:
    build:
      context: ./devmax
      args:
        DEV_USERNAME: ${DEV_USERNAME:-dev}
        DEV_PASSWORD: ${DEV_PASSWORD:?DEV_PASSWORD environment variable is required}
        ROOT_PASSWORD: ${ROOT_PASSWORD:-}
    container_name: devmax
    volumes:
      - ./workspace:/workspace
      - node_modules:/workspace/node_modules
      - maven_cache:/home/dev/.m2
    ports:
      - "3000:3000"    # React/Next.js dev server
      - "8080:8080"    # Spring Boot default
      - "8081:8081"    # Alternative Java app port
      - "9000:9000"    # Additional development port
      - "5000:5000"    # Express.js default
      - "4200:4200"    # Angular dev server
      - "2222:22"      # SSH server
    environment:
      - NODE_ENV=development
    stdin_open: true
    tty: true
    working_dir: /workspace
    networks:
      - dev-network
    # depends_on:
    #   - postgres

  nginx:
    image: nginx:alpine
    container_name: nginx-server
    ports:
      - "8888:80"    # External 8888 -> Internal 80
    volumes:
      - ./workspace:/usr/share/nginx/html:ro    # Read-only access to workspace
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro    # Custom nginx config
    networks:
      - dev-network
    restart: unless-stopped

  # postgres:
  #   build:
  #     context: ./postgres-custom
  #   container_name: postgres-db
  #   environment:
  #     POSTGRES_USER: dev
  #     POSTGRES_PASSWORD: dev
  #     POSTGRES_DB: devdb
  #     PGDATA: /var/lib/postgresql/data/pgdata
  #   volumes:
  #     - ./db/pg01:/var/lib/postgresql/data # db/pg01 shall exists before container launch
  #     - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped
  #   networks:
  #     - dev-network

  # adminer:
  #   image: adminer:latest
  #   container_name: adminer
  #   restart: always
  #   ports:
  #     - "8085:8080"   # Access web UI at http://localhost:8085
  #   networks:
  #     - dev-network

networks:
  dev-network:
    driver: bridge

volumes:
  node_modules:
  maven_cache: